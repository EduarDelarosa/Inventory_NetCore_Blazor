@using Business
@using Entities

<div class="form-group">
    <select class="form-control" @onchange="OnChangeWarehouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (var warehouse in listWarehouse)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>

<hr />

<EditForm Model="oInOuts">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOuts.StorageId">
            <option value="">Seleccione un producto...</option>
            @foreach (var storage in listStorage)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="@oInOuts.Quantity" />
    </div>
    <div>
        <label>Entrada</label>
        <InputCheckbox @bind-Value="@oInOuts.IsInput" />
    </div>

    <input type="button" value="@buttonValue" @onclick="SaveInOut" />
</EditForm>

<div class="text-center h4">
    @message
</div>

@code {
    InOuts oInOuts = new InOuts();
    List<WarehouseEntity> listWarehouse = new List<WarehouseEntity>();
    List<StorageEntity> listStorage = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message;

    string buttonValue => oInOuts.IsInput ? "Registrar entrada" : "Registrar salida";

    protected override async Task OnInitializedAsync()
    {
        listWarehouse = B_Warehouse.WarehouseList();
    }


    private void OnChangeWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        listStorage = B_Storage.StorageProductsByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = listStorage.LastOrDefault(s => s.StorageId == oInOuts.StorageId);
        oProduct = oStorage.Product;

        if (oInOuts.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOuts.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.Total = oProduct.Total + oInOuts.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"El Producto {oProduct.ProductName} ha sido actualizado!";
        }
        else
        {
            if (IsBiggerThanZero(oInOuts.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOuts.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.Total = oProduct.Total - oInOuts.Quantity;
                B_Product.UpdateProduct(oProduct);

                message = $"El Producto {oProduct.ProductName} ha sido actualizado!";

            }else
            {
                message = $"No existe la cantidad suficiente para el producto: {oProduct.ProductName}";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (quantity > storageQuantity)
        {
            return false;
        }

        return true;
    }

}
